# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'kenken.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from kenken import generate,Kenken,csp,np


def get_master_cell(batch):
    new_list = sorted(batch, key=lambda x: (x[1], x[0]))
    return new_list[0]

class Ui_MainWindow(object):


    def __init__(self):
        self.solved = False 


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(820, 600)
        MainWindow.setStyleSheet("font: 14pt \"Times New Roman\";")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.push_generate = QtWidgets.QPushButton(self.centralwidget)
        self.push_generate.setGeometry(QtCore.QRect(390, 20, 391, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.push_generate.setFont(font)
        self.push_generate.setObjectName("push_generate")
        self.push_bt = QtWidgets.QPushButton(self.centralwidget)
        self.push_bt.setGeometry(QtCore.QRect(10, 61, 131, 71))
        self.push_bt.setObjectName("push_bt")
        self.push_btfc = QtWidgets.QPushButton(self.centralwidget)
        self.push_btfc.setGeometry(QtCore.QRect(170, 61, 201, 71))
        self.push_btfc.setObjectName("push_btfc")
        self.push_btfcac = QtWidgets.QPushButton(self.centralwidget)
        self.push_btfcac.setGeometry(QtCore.QRect(390, 61, 271, 71))
        self.push_btfcac.setObjectName("push_btfcac")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(680, 70, 111, 51))
        self.checkBox.setObjectName("checkBox")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(10, 140, 781, 391))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(55, 20, 321, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 91, 51))
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 35))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.push_generate.setText(_translate("MainWindow", "Generate"))
        self.push_bt.setText(_translate("MainWindow", "Backtracking"))
        self.push_btfc.setText(_translate("MainWindow", "Backtracking with\n"
"Forward Checking"))
        self.push_btfcac.setText(_translate("MainWindow", "Backtracking with \n"
"Arc consistency"))
        self.checkBox.setText(_translate("MainWindow", "Accumulate"))
        self.label.setText(_translate("MainWindow", "Size :"))

        self.push_generate.clicked.connect(self.click_generate)
        self.push_bt.clicked.connect(self.click_bt)
        self.push_btfc.clicked.connect(self.click_btfc)
        self.push_btfcac.clicked.connect(self.click_btfcac)

    def draw_table (self):

        self.tableWidget.setRowCount(self.size)
        self.tableWidget.setColumnCount(self.size)


        for i , batch in enumerate (self.batches):
            color = self.colors[i]
            cells = batch[0]
            
            master = get_master_cell(cells)
            
            for cell in cells:
                self.tableWidget.setItem(cell[1]-1,cell[0]-1,QtWidgets.QTableWidgetItem())
                self.tableWidget.item(cell[1]-1,cell[0]-1).setBackground(QtGui.QColor(color[0],color[1],color[2]))
        
            self.tableWidget.item(master[1]-1,master[0]-1).setText("["+str(batch[2])+str(batch[1]+"]"))




    def click_generate(self):
        self.solved = False

        if self.checkBox.isChecked():
            print("Checked")
        print("Generate!")
        try:
            self.size = int(self.lineEdit.text())
            self.colors = []
            for i in range(self.size**2):
                self.colors.append(list(np.random.choice(range(70,256), size=3)))

            _ , self.batches = generate(size=self.size)
            self.draw_table()


            print(self.size)
        except:
            pass

    def draw_solution(self,solution):
        if self.checkBox.isChecked():
           
            pass
        else:
            if self.solved:
                self.tableWidget.clear()
                #tableW.setRowCount(0)
                self.draw_table()
        
        for batch in solution:
            for i , cell in enumerate(batch):
                value = solution[batch][i]
                idx = cell
                temp = self.tableWidget.item(idx[1]-1,idx[0]-1).text()
                self.tableWidget.item(idx[1]-1,idx[0]-1).setText(temp + ' ' + str(value))

            
            


    def click_bt(self):
        try:
            game_instance = Kenken(self.size, self.batches)
            solution = csp.backtracking_search(game_instance)
            self.draw_solution(solution)
            self.solved = True
        except:
            pass


        print("BT")

    def click_btfc(self):
        try:
            game_instance = Kenken(self.size, self.batches)
            solution = csp.backtracking_search(game_instance,inference=csp.forward_checking)
            self.draw_solution(solution)
            self.solved = True
        except:
            pass


        print("BTFC")

    def click_btfcac(self):
        try:
            game_instance = Kenken(self.size, self.batches)
            solution = csp.backtracking_search(game_instance,inference=csp.arc_consistency)
            self.draw_solution(solution)
            self.solved = True
        except:
            pass

        print("BTAC")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
